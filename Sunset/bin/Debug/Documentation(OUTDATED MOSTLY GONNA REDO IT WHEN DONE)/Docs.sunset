; === === Ultimate Sunset Resource === ===
; As a note: your program can compile even if your
; sections are mixed or not in order. It is only
; a recommendation to easily organize your code
; and limit the possibilities for error, and so
; anybody reading your code can easily identify
; which section and which data they need to find.
; === === ======================== === ===

; Commented text (text that is skipped by the compiler) is recognizable
; by the semicolon ";" that is found before the text inside of the comment.

; =================================================================
; =                             Header                            =
; =================================================================
; This section of a Sunset file exists at the beginning of the file. 
; It consists of compiler instructions, declarations, flags and of
; the like. Compiler instructions can be executed outside of the
; header if necessary, however the reason they should be in the header
; is for not only organization purpose, but also so that the entire
; file remains consistent with the way it has set up the compiler.
; The amount of modification/flags to be set in the compiler are
; rather limited (7/14/2021 8:06AM), so this section is generally empty
; or small. Examples of compiler instructions are 'TOGGLEGUI' and 'STRUCT'.

TOGGLE_GUI ; The gui flag is false by default. If 
           ; the gui flag is false, it will cause 
           ; your program to launch a console window.
           ; Libraries that create a GUI should set
           ; the gui to true, so you won't have to.

setpheapvar ; Temporary

; ==================================================================


; =================================================================
; =                         Import Section                        =
; =================================================================
; Only imports of other Sunset files exist in the Import Section.
; When importing, you can either type the exact filepath to the file, 
; or the filepath to the file relative to the Sunset compiler executable, 
; which should contain a wide range of pre made imports. If an import 
; does not have a file extension and does not exist, the compiler will 
; attempt to add '.sunset' at the end of the string, and re-check if 
; the file exists. Unused imports are discouraged, but harmless. If an
; unused import exists in a sunset file, it will still be compiled,
; causing your final output exe to have an (often trivial) amount of
; unneeded space. This space is often so trivial it won't affect your
; output file size, because it is rounded up to the nearest .5kb, at
; least on windows applications. Unused imports have no affect on 
; performance. Very large libraries will increase the size of your output 
; file considerably.

import(Windows/User) ; This is a class, see ./Windows/User.sunset
import(Windows/MSG) ; This is a struct, see ./Windows/MSG.sunset
import(Windows/PAINTSTRUCT) 
import(Windows/POINT)
import(Windows/RECT)
import(Windows/WNDCLASSA)

; =================================================================


; =================================================================
; =                         Dll References                        =
; =================================================================
; Imports of third party and other files are declared here. The format
; of a dll reference is similar to that of a function, however it 
; does not contain a block, it contains no variable names, and it
; contains the DLL that it came from.

dllref(User32,int,str,str,int) MessageBoxA int ; For instance, this dll reference contains a function named "MessageBoxA". The dll name is the first
                                               ; parameter of the dllref keyword, "User32". This filename can be adjusted freely in terms of case sensitivity,
                                               ; and an optional ".DLL" can be appended. Following the initial parameter, each parameter type of the referenced
                                               ; DLL are listed. For this particular DLL, there is an integer, string, string and integer. The return value of
                                               ; the function is located after the function name. In this case, it is an integer. Variable types will be documented 
                                               ; in further detail later in this file. The source of this dll reference can be found on the following MSDN (Microsoft) link.
					       ; Source of function: https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxa

; There is a feature that must occasionally be applied to some DLL references. This feature
; is the calling convention, and when a dll reference has a different calling convention, i.e
; C Declaration, it should be indicated on the dll reference that the reference has an unique
; calling convention. Notices for this can be found on the bottom of the MSDN sources (7/14/2021 8:54AM)
dllref(User32,str,str,int) cdecl:wsprintfA int ; Notice there the "cdecl:" prefix on the function name.
                                               ; Source of function: https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-wsprintfa

; The following dll reference's return type is "void". This means that its return value type is "none".
dllref(Kernel32,int) ExitProcess void ; Source of function: https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-exitprocess
dllref(User32,int) PostQuitMessage void

dllref(Kernel32,str) GetModuleHandleA int
dllref(User32,WNDCLASSA) RegisterClassA int
dllref(User32,int,int,int,int) DefWindowProcA int
dllref(User32,int,str,str,int,int,int,int,int,int,int,int,int) CreateWindowExA int
dllref(User32,MSG,int,int,int) GetMessageA bool
dllref(User32,MSG) TranslateMessage void
dllref(User32,MSG) DispatchMessageA void
dllref(User32,int,PAINTSTRUCT) BeginPaint int
dllref(User32,int,RECT,int) FillRect int
dllref(User32,int,PAINTSTRUCT) EndPaint int
dllref(User32,int) GetSysColorBrush int
dllref(User32,int,RECT) GetClientRect bool
dllref(User32,int,str,int,RECT,int) DrawTextA int
dllref(Gdi32,int,int,int,str,int) TextOutA bool

; =================================================================


; =================================================================
; =                           Variables                           =
; =================================================================
; Variables (arrays, variables, classes or a type of class i.e struct) 
; should be defined here. Their value does not have to be assigned immediately.
; This section of course does not apply to local variables.

int num ; A type of variable, Integer, that stores a number. Its byte size is 4, and the name of this variable is "num".
        ; Variables have a default value of zero (null). This does not apply for local variables, they should be set to zero
	; or whichever value immediately, as their value will be whatever happens to be on the stack when they are allocated.

User user becomes new(User)  ; A class, that stores a pointer to a particular class structure (in this case, "User"). 
                             ; Its byte size is 4. The byte size is 4 regardless of the type of class that is being declared.
                             ; The "becomes" keyword indicates that the variable on the left hand side of the word
                             ; is to be set to the value on the right hand side. On the right hand side of the becomes
                             ; keyword, a keyword "new" is indicated. The "new" keyword will instantiate a class of
                             ; the type provided in its parameter. This will cause a heap allocation and potentially
                             ; a call to GetProcessHeap. Classes and sub-types of classes (i.e structs) are stored on the heap.

WNDCLASSA wndClassA ; A struct, which works similar to a class, except some different properties in the data stored on the heap.
MSG msg ; Another struct of a different type

shr ctr ; A type of variable, Short, that stores a number. Its byte size is 2, and the name of this variable is "ctr".
 
byte b ; A type of variable, Byte, that stores a number. Its byte size is 1, anda the name of this variable is "b".

; This following variable is a type of "str", or string. It stores a text value, in the form of an array of bytes.
; Each byte stores 1 letter, except for the final byte, which is 0 (a null) byte indicating the end of the string.
str className becomes "SunsetClass" ; This is a string named "className", which contains the value "Sunset GUI"

; Integer variables that will indicate different properties in our application:
int WM_DESTROY becomes 2
int COLOR_WINDOW becomes 5
int WM_PAINT becomes 15

; This will contain the handle of the window that will be created later
int windowHandle

; This will contain the handle of the brush to draw on the window
int brushHandle becomes GetSysColorBrush(COLOR_WINDOW)

; A variables value can be modified by 1 by increasing or decreasing it
; Instances of this, where the variable name is "brushHandle" for only
; demonstration purposes, are:
;
;	++brushHandle
;	--brushHandle
;	brushHandle++
;	brushHandle--
;	brushHandle ++
;	brushHandle --
;

; =================================================================


; =================================================================
; =                           Functions                           =
; =================================================================
; All Sunset functions defined within this file should be located here.

; Functions are defined using the "func" keyword
; Each parameter to be passed to the function should be described
; in the parameters of the "func" keyword. The format should be:
;
; [Type of Variable] [Parameter Name], ...
;
; (Square brackets are excluded, the 3 periods indicate that the format can be repeated and are also excluded)
; Parameters to pass through to a function are optional, if it is decided to have none simply exclude the parentheses
; that appear after the "func" keyword and remove everything within them, and the function is to be defined as normal.
; The name of the function is written after the parameters close, and an optional return value type can be indicated
; in the following word. After the name of the function or the optional var type, the function is to be opened
; using curly brackets. From within the curly brackets (the block), there are pre defined local variables. Local variables
; are variables that are defined within a block, and only can be referred to in that block after they are defined, or any
; child block. In the case of functions, there are pre-defined local variables, which are the aforementioned parameters that
; are defined with the function. These are passed through whenever the function is called, and again, are optional, so they may not exist.
func(str message) mbox int {
	
	; Functions are called by typing their name, and inputting the pre defined parameters in the parameters of the function.
        ; If the function has no parameters, no parentheses and therefore no parameters are needed to be input when calling at all.
        ; Dll referenced functions are called the same way that Sunset defined functions are called (in terms of Sunset code).
        ; This is an example of how a function would be called:
	; MessageBoxA(null,message,"",null)
        ; Functions however, can have their return value accessed and stored or used. Here is an example of that:
	retn(MessageBoxA(null,message,"",null))
	; The "retn" keyword is what will close a function and set the return variable. The return variable in this case is
	; set to the return variable of the MessageBoxA dll-referenced function, which is also an int, so of course it is compatible
	; with another int, that is the return value of this function.
	; The "null" keyword which was presented as the first and last parameters passed to the function, simply means Zero, "0", or Nothing.
	
}
func(int hwnd,int uMsg,int wParam,int lParam) wndProc int {
	
	if (uMsg,=,WM_PAINT) {
		
		PAINTSTRUCT pstrc becomes new(PAINTSTRUCT)
		RECT rc becomes new(RECT)
		int hdc becomes BeginPaint(hwnd,pstrc)
		GetClientRect(hwnd,rc)
		int maxBottom becomes rc.bottom
		FillRect(hdc,rc,brushHandle) ; Fill background of window
		int y becomes 0              ; Height is 0 from the top
		bool nameSet becomes false
		str numBuffer becomes "-            " ; Reserve 13 spaces (12 for digits, 1 for +/-). 
						      ; This can be accomplished using byte arrays as well.
		wsprintfA(numBuffer,"%d",user.getTicksSinceLoggedOn)
		while (true) {
			
			if (!nameSet) {
				
				DrawTextA(hdc,user.name,-1,rc,null)
				y becomes 30
				nameSet becomes true
				continue ; The continue keyword does not end the loop
					 ; but skips the remainder of the current block.
				
			}
			if (y,>,maxBottom) {
				
				break ; The break keyword ends the loop and skips the remainder
				      ; of the current block.
				
			}
			else {
				
				TextOutA(hdc,0,y,numBuffer,13)
				
			}
			
			y becomes y+30 ; This is the first example of in-line math in this file,
				       ; Math can be implemented in values
			
		}
		
		EndPaint(hwnd,pstrc)
		retn(null)
		
	}
	
	if (uMsg,=,WM_DESTROY) {
		
		mbox("Goodbye")
		PostQuitMessage(null)
		retn(null)
		
	}
	
	retn(DefWindowProcA(hwnd,uMsg,wParam,lParam))
	
}
; Similar to dll references, the "void" type may also be set as a return type for functions. This effectively has no difference to not setting a type at all.

; =================================================================


; =================================================================
; =                      Entry / Constructor                      =
; =================================================================
; This is where all constructor or on application start code should be written

int response becomes MessageBoxA(null,"Would you like to launch the application?","Welcome",4) ; Open a Yes/No MessageBox asking the user for basic input.
; The return value of the above function call will be stored in the integer variable "response".
; If the user responded YES, the variable should be equal to 6.
; If the user responded NO, the variable should be equal to 7.
; The return value information can be accessed here, from Microsoft (as of 7/14/2021 10:16AM): https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxa#return-value

; The following "if" statement will determine whether the user clicked NO or YES.
; Similar to the "func" keyword, the "if" keyword also opens a block after it is called. If the if statement is true, it will run code in that block.
; In an "if" keyword's parameters, the leftmost parameter and rightmost parameter are being compared. The middle parameter is the type of comparison.
; Types of comparison are:

; - >= Greater than or equal to
; - > Greater than
; - <= Less than or equal to
; - < Less than
; - = Equal to
; - =/= Not equal to

; If the response variable is equal to 6
if (response,=,6) {
	
	; The user pressed yes...
	mbox("The application will now launch") ; Tell the user that the application will now launch.
						; These persistent message boxes are unnecessary, annoying and are for only educational purpose/documentation purpose/proof of concept.
	
}

; The following keyword is an "else" statement. They only appear immediately after an if block is closed,
; and what is written inside them will run only if the if clause ends up being false.

else {
	
	; The user did not press yes...
	ExitProcess(0) ; Exit the process with exit code 0
	
}

; There is a different format to if statements, which is the boolean format.
; Booleans are a type of variable that are defined as such:
bool myBoolean becomes true
; Booleans can either be "true" or "false".
; Booleans can be initialized in ways other than "true" or "false", by setting the variable to the return value of a function.
; If statements tie into booleans because they can process them with a single parameter as such:

if (myBoolean) {
	
	; myBoolean is true.
	
}
else {
	
	; myBoolean is false.
	
}

; Alternatively, to avoid an else statement, you can use the "!" keyword as a prefix for the boolean
; which effectively means "not". An example of this is here:

if (!myBoolean) {
	
	; myBoolean is false
	
}
else {
	
	; myBoolean is true
	
}
; The previous two if/else clauses have no effect and were written for only demonstrative purpose.
; The following statement is initializing a struct, similar to a class, except with different properties.
; Specifically, some general properties of a struct is they should be stripped from all constructor data,
; in most cases all instructions, and are left with only variables, arrays, classes and similar data of the like.
; The variable was previously declared so its value will be set here.
wndClassA becomes new(WNDCLASSA)
; Structs have variables like any Sunset file likely would. To access them, simply write a period following
; the name of the struct variable. Here is a demonstration of setting many variables in a struct:
wndClassA.hInstance becomes GetModuleHandleA(null) ; Set the hInstance variable in the STRUCT.
						   ; The struct has a variable named hInstance and 
					           ; it was just set to the return value of GetModuleHandleA(null)
; This following line is setting another variable, an "int", of wndClassA.
; "wndProc" is a function defined earlier in this file. There is a "$" that
; is a prefix for the function. This simply indicates that it is getting
; the memory address of the function, so that 3rd parties (Microsoft) in
; this case, can use the memory address to call the function. To further
; clarify, the following line will not call the function, but provide
; an address to the function, so a 3rd party (Microsoft) can use it.
; The "$" prefix is valid for any instance that has a memory address.
wndClassA.lpfnWndProc becomes $wndProc
wndClassA.lpszClassName becomes className ; Set the class name to "className", which contains the value "SunsetClass"
; Once the struct is created, it can be passed into even a 3rd party function, to be used by the 3rd party for whatever reason.
; In this case, it will be used by Microsoft to register the class struct that was just setup, in order to create a window.
RegisterClassA(wndClassA)

; This is a call to the dll-referenced function CreateWindowExA, and stores the handle of the window in the "windowHandle" variable defined previously.
; The following line demonstrates that one can also get values from structs, as one of the paremeters are "wndClassA.hInstance", getting the value of
; that variable in the struct defined earlier. In order for this particular function to work, RegisterClassA needs to have been succesfully called as well.
windowHandle becomes CreateWindowExA(null,className,"Sunset GUI",273154048,128,128,256,192,null,null,wndClassA.hInstance,null)
msg becomes new(MSG) ; Initialize the "msg" variable as a struct of type "MSG"

; The following line will introduce a new type of keyword, "while". Its parameters are identical to that of an "if" keyword. The
; functionality of "while" and "if" are similar, where they both run the code written inside their block if their parameter calculates
; as true. The difference between "while" and "if", is that a "while" block will continue looping itself until the calculation is
; false. An example will now follow.
while (GetMessageA(msg,null,null,null)) {
	
	; This will continue looping until GetMessageA returns a false
	; value. A new concept was also introduced in the while statement,
	; because the "msg" variable was put in as a parameter. In this case,
	; the 3rd-party (Microsoft) takes in the MSG parameter and assigns
	; its own values to its variables. Then, this application can use them.
	
	TranslateMessage(msg)
	DispatchMessageA(msg)
	
}