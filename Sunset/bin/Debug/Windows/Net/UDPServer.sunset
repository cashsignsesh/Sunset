import(Windows/Net/AddressFamily)
import(Windows/Net/SocketType)
import(Windows/Net/IpProtocol)
import(Windows/Net/WSADATA)
import(Windows/MessageBox)
import(Windows/Net/SOCKADDR_IN)
import(String)
dllref(Ws2_32,AddressFamily,SocketType,IpProtocol) socket int
dllref(Ws2_32) WSAGetLastError int
dllref(Ws2_32,shr,WSADATA) WSAStartup int
dllref(Ws2_32,int,SOCKADDR_IN,int) bind int
dllref(Ws2_32,int,byte#,int,int,SOCKADDR_IN,PTR) recvfrom int
dllref(Ws2_32,int) closesocket int
dllref(Ws2_32,int,byte#,int,int,SOCKADDR_IN,int) sendto int

pullable int sockDesc
pullable int lastError becomes 0

private SOCKADDR_IN serverAddr
private SOCKADDR_IN lastClient

public func listen byte# {
	
	byte# buffer becomes #1024
	int ln becomes Bsizeof(SOCKADDR_IN)
	SOCKADDR_IN clientAddr becomes new(SOCKADDR_IN)
	int n becomes recvfrom(sockDesc,buffer,1024,0,clientAddr,$ln)
	lastClient becomes clientAddr
	retn(buffer)
	
}

public func close int {
	sockDesc becomes 0
	retn(closesocket(sockDesc))
}

public func(byte# data,int dataLen) respond {
	
	sendto(sockDesc,data,dataLen+8,0,lastClient,Bsizeof(SOCKADDR_IN))
	
}

constructor(shr port) {

	; Initialize winsock
	; https://learn.microsoft.com/en-us/windows/win32/winsock/initializing-winsock
	WSADATA wd becomes new(WSADATA)
	int res becomes WSAStartup(0202,wd)
	if (res,=/=,0) { lastError becomes res }
	
	sockDesc becomes socket(AddressFamily.INET,SocketType.DGRAM,IpProtocol.UDP)
	if (sockDesc,<,0) {
		; Error (+ Invalid socket, no point continuing)
		lastError becomes WSAGetLastError
	}
	else {
		; Socket OK	
		SOCKADDR_IN serverAddr becomes new(SOCKADDR_IN)
		serverAddr.sin_family becomes cast(AddressFamily.INET,shr)
		serverAddr.sin_port becomes port
		
		if (bind(sockDesc,serverAddr,Bsizeof(SOCKADDR_IN)),<,0) {
			; Error
			lastError becomes WSAGetLastError
		}
	}

}
