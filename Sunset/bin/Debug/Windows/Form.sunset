TOGGLE_GUI

acknowledge HDC       as PTR
acknowledge HWND      as PTR
acknowledge HMENU     as PTR
acknowledge HINSTANCE as PTR
acknowledge HBRUSH    as PTR
acknowledge HRGN      as PTR
acknowledge HBITMAP   as PTR
acknowledge HGDIOBJ   as PTR

import(Windows/MSG)
import(Windows/Drawing/PAINTSTRUCT) 
import(Windows/Drawing/POINT)
import(Windows/Drawing/RECT)
import(Windows/WNDCLASSA)
import(Windows/Components/SimpleLabel)
import(Windows/FormEventArgs)
import(List<SimpleLabel>)
import(String)
import(Event<FormEventArgs>)
import(Windows/TimerEventArgs)
import(Event<TimerEventArgs>)
import(Windows/FormTimer)
import(List<FormTimer>)
import(List<RECT>)
import(Windows/KeyEventArgs)
import(Event<KeyEventArgs>)
import(List<POINT>)
import(List<List<POINT>>)
import(Windows/Components/FormImage)
import(List<FormImage>)
import(Windows/Drawing/Line)
import(List<Line>)
import(Windows/MouseEventArgs)
import(Event<MouseEventArgs>)
import(Windows/CollisionEventArgs)
import(Event<CollisionEventArgs>)
import(List<FUNCPTR>)
import(Windows/Drawing/SIZE)
import(Windows/Drawing/BITMAP)
import(Windows/Drawing/RECTF)
import(List<RECTF>)
import(Windows/Components/Component)
import(Windows/Components/ProgressBar)
import(Windows/PaintMsg)
import(List<Component>)
import(Windows/MessageBox)
import(ASCIIKey)

dllref(Kernel32,str) GetModuleHandleA int
dllref(User32,int) GetSysColorBrush HBRUSH
dllref(User32,WNDCLASSA) RegisterClassA int
dllref(User32,HWND,int,int,int) DefWindowProcA int
dllref(User32,int,str,str,int,int,int,int,int,HWND,HMENU,HINSTANCE,int) CreateWindowExA HWND
dllref(User32,MSG,HWND,int,int) GetMessageA bool
dllref(User32,MSG) TranslateMessage void
dllref(User32,MSG) DispatchMessageA void
dllref(User32,HWND,PAINTSTRUCT) BeginPaint HDC
dllref(User32,HDC,RECT,HBRUSH) FillRect int
dllref(User32,HWND,PAINTSTRUCT) EndPaint bool
dllref(User32,HWND,RECT) GetClientRect bool
dllref(Gdi32,HDC,int,int,str,int) TextOutA bool
dllref(User32,int) PostQuitMessage void
dllref(User32,HWND,str,str,int) MessageBoxA int
dllref(User32,HWND,int,int,FUNCPTR) SetTimer int
dllref(User32,HWND,RECT,HRGN,int) RedrawWindow bool
dllref(Kernel32,int) ExitProcess void
dllref(Gdi32,HDC,int) SetDCBrushColor int
dllref(Gdi32,HDC,int) SetDCPenColor int
dllref(Gdi32,HDC,POINT#,int) Polyline bool
dllref(Gdi32,HDC,int,int) LineTo bool
dllref(Gdi32,HDC,int,int,int,int,HDC,int,int,int) BitBlt bool
dllref(Gdi32,HDC) CreateCompatibleDC HDC
dllref(Gdi32,HDC,HGDIOBJ) SelectObject HGDIOBJ
dllref(Gdi32,HDC) DeleteDC bool
;dllref(Gdiplus,Pen,int,int,int,int) GdipDrawLine bool
dllref(Gdi32,HDC,int,int,POINT) MoveToEx bool
dllref(Gdi32,HDC,str,int,SIZE) GetTextExtentPoint32A bool
dllref(User32,HWND) GetDC HDC
dllref(Gdi32,HBITMAP,int,BITMAP) GetObjectA int

WNDCLASSA wndClassA
MSG msg
str className becomes "SunsetClass"
pullable int WM_DESTROY becomes 2
pullable int COLOR_WINDOW becomes 5
pullable int WM_PAINT becomes 15
pullable int WM_NCCREATE becomes 129
pullable int ETO_CLIPPED becomes 4
pullable int WM_TIMER becomes 275
pullable int COLOR_WINDOWTEXT becomes 8
pullable int RDW_INVALIDATE becomes 1
pullable int WM_KEYDOWN becomes 100h
pullable int WM_KEYUP becomes 101h
pullable int SRCCOPY becomes 0CC0020h
pullable int RDW_UPDATENOW becomes 100h
pullable HWND windowHandle
pullable int WM_MOUSEMOVE becomes 200h
pullable int WM_LBUTTONDOWN becomes 201h
pullable int brushHandle becomes GetSysColorBrush(COLOR_WINDOW)
public int contentsHandle becomes GetSysColorBrush(COLOR_WINDOWTEXT)

public List<RECT> ellipses becomes new(List<RECT>)
public List<List<POINT>> polyLines becomes new(List<List<POINT>>)
public List<Line> lines becomes new(List<Line>)
public List<Component> components becomes new(List<Component>)

public List<FormTimer> timers becomes new(List<FormTimer>)
public List<RECT> hitboxes becomes new(List<RECT>)
public List<FUNCPTR> fncExecQueue becomes new(List<FUNCPTR>) ; Funcs are expected to have no parameters. Ran at start of next wndProc call

pullable int w ;Width
pullable int h ;Height
pullable int x ;X
pullable int y ;Y
pullable str title ;Form title
public Event<FormEventArgs> onFormClosing becomes new(Event<FormEventArgs>)
public Event<FormEventArgs> onFormCreation becomes new(Event<FormEventArgs>)
public Event<TimerEventArgs> onTimerTick becomes new(Event<TimerEventArgs>)
public Event<KeyEventArgs> onKeyDown becomes new(Event<KeyEventArgs>)
public Event<KeyEventArgs> onKeyUp becomes new(Event<KeyEventArgs>)
public Event<MouseEventArgs> mouseMove becomes new(Event<MouseEventArgs>)
public Event<CollisionEventArgs> mouseEnter becomes new(Event<CollisionEventArgs>)
public Event<MouseEventArgs> onLmbDown becomes new(Event<MouseEventArgs>)
public Event<CollisionEventArgs> onHitboxLmbDown becomes new(Event<CollisionEventArgs>)
public int cTimerId becomes 1
int RGBref becomes -1

func(HWND hwnd,int uMsg,int wParam,int lParam) wndProc int {
	
	if (fncExecQueue.length,=/=,0) {
		
		foreach (fnc,fncExecQueue.toArray) {
			callptr(fnc)
		}
		fncExecQueue.clear
		
	}
	
	if (uMsg,=,WM_NCCREATE) {
		if (windowHandle,=,0) { windowHandle becomes hwnd }
		FormEventArgs args becomes new(FormEventArgs)
		args.info becomes "The form is being created"
		onFormCreation.raise(args)
	}
	
	if (uMsg,=,WM_PAINT) {
; On Paint
		PAINTSTRUCT pstrc becomes new(PAINTSTRUCT)
		RECT rc becomes new(RECT)
		HDC hdc becomes BeginPaint(hwnd,pstrc)
		GetClientRect(hwnd,rc)
		
		int maxBottom becomes rc.bottom
		FillRect(hdc,rc,brushHandle)
		SetDCPenColor(hdc,RGBref)
		foreach (component,components.toArray) {
			PaintMsg pm becomes new(PaintMsg)
			pm.hdc becomes hdc
			pm.windowHandle becomes windowHandle
			component.onPaint(pm)
		}
		foreach (polyLine,polyLines.toArray) {
			Polyline(hdc,polyLine.toArray+8,lengthof(polyLine.toArray))
		}
		foreach (line,lines.toArray) {
			MoveToEx(hdc,line.x,line.y,null)
			LineTo(hdc,line.x0,line.y0)
		}
		EndPaint(hwnd,pstrc)
		retn(null)
		
	}
	
	if (uMsg,=,WM_DESTROY) {
; On Closed
		FormEventArgs args becomes new(FormEventArgs)
		args.info becomes "The form is about to be destroyed"
		onFormClosing.raise(args)
		PostQuitMessage(null)
		ExitProcess(0)
		
	}
	
	if (uMsg,=,WM_TIMER) {
		
		TimerEventArgs args becomes new(TimerEventArgs)
		args.formHandle becomes cast(hwnd,int)
		foreach (timer,timers.toArray) {
			if (timer.id,=,wParam) {
				args.sendingTimer becomes timer
				break
			}
		}
		
		onTimerTick.raise(args)
		
	}
	
	if (uMsg,=,WM_KEYDOWN) {
		
		KeyEventArgs args becomes new(KeyEventArgs)
		args.key becomes cast(wParam,ASCIIKey)
		args.flags becomes lParam
		onKeyDown.raise(args)
		
	}
	
	if (uMsg,=,WM_KEYUP) {
		
		KeyEventArgs args becomes new(KeyEventArgs)
		args.key becomes cast(wParam,ASCIIKey)
		args.flags becomes lParam
		onKeyUp.raise(args)
		
	}
	
	if (uMsg,=,WM_MOUSEMOVE) {
		
		MouseEventArgs args becomes new(MouseEventArgs)
		shr mouseX becomes cast(lParam,shr)
		int mouseY becomes (lParam%65535)-mouseX
		args.x becomes mouseX
		args.y becomes mouseY
		mouseMove.raise(args)
		if (mouseEnter.references,=/=,0) {
			foreach (bounds,hitboxes.toArray) {
				if (bounds.left,<,mouseX) {
					if (bounds.right,>,mouseX) {
						if (bounds.top,<,mouseY) {
							if (bounds.bottom,>,mouseY) {
								CollisionEventArgs args0 becomes new(CollisionEventArgs)
								args0.x becomes mouseX
								args0.y becomes mouseY
								args0.hitbox becomes bounds
								mouseEnter.raise(args0)
							}
						}
					}
				}
			}
		}
	}

	if (uMsg,=,WM_LBUTTONDOWN) {
		
		MouseEventArgs args becomes new(MouseEventArgs)
		shr mouseX becomes cast(lParam,shr)
		int mouseY becomes (lParam%65535)-mouseX
		args.x becomes mouseX
		args.y becomes mouseY
		onLmbDown.raise(args)
		foreach (component,components.toArray) {
			if (component.x,<,mouseX) {
				if (component.x+component.width,>,mouseX) {
					if (component.y,<,mouseY) {
						if (component.y+component.height,>,mouseY) {
							MouseEventArgs args0 becomes new(MouseEventArgs)
							args0.x becomes mouseX
							args0.y becomes mouseY
							component.onClick(args0)
						}
					}
				}
			}
		}
		if (onHitboxLmbDown.references,=/=,0) {
			foreach (bounds,hitboxes.toArray) {
				if (bounds.left,<,mouseX) {
					if (bounds.right,>,mouseX) {
						if (bounds.top,<,mouseY) {
							if (bounds.bottom,>,mouseY) {
								CollisionEventArgs args0 becomes new(CollisionEventArgs)
								args0.x becomes mouseX
								args0.y becomes mouseY
								args0.hitbox becomes bounds
								onHitboxLmbDown.raise(args0)
							}
						}
					}
				}
			}
		}
	}
	
	retn(DefWindowProcA(hwnd,uMsg,wParam,lParam))
	
}

public func show {
	CreateWindowExA(null,className,title,10480000h,x,y,w,h,null,null,wndClassA.hInstance,null)
	msg becomes new(MSG)
	while (GetMessageA(msg,null,null,null)) {
		
		TranslateMessage(msg)
		DispatchMessageA(msg)
		
	}

}

public func(int interval_ms) createTimer FormTimer {
	
	int id becomes SetTimer(windowHandle,cTimerId,interval_ms,null)
	FormTimer timer becomes new(FormTimer,id,cast(windowHandle,int))
	timers.add(timer)
	++cTimerId
	retn(timer)
	
}

public func(str msg,str m_title) mbox int {
	
	retn(MessageBoxA(windowHandle,msg,m_title,0))
	
}
public func rePaint {
	
	RECT region becomes new(RECT)
	region.right becomes w
	region.bottom becomes h
	RedrawWindow(windowHandle,region,null,RDW_INVALIDATE)
	
}

public func(byte r,byte g,byte b) setDrawingRGB {
	
	RGBref becomes r+g+b ; this wont work
	; it needs to be appended not added
	; 00 | 00 | 00
	; not 00 + 00 + 00
	
}

public func kill {
	ExitProcess(0)
}

public func(str text) getStdTextSize SIZE {
	
	SIZE strSize becomes new(SIZE)
	GetTextExtentPoint32A(GetDC(windowHandle),text,String.lengthOf(text),strSize)
	retn(strSize)
	
}

; Return value: Btn Hitbox
public func(int x,int y,str text) drawBtn RECT {
	
	SIZE strSize becomes getStdTextSize(text)
	; x y x0 y0
	Line l becomes new(Line)
	l.x becomes x
	l.y becomes y
	l.x0 becomes x+2+strSize.cx
	l.y0 becomes y
	lines.add(l)
	Line l0 becomes new(Line)
	l0.x becomes l.x0
	l0.y becomes y
	l0.x0 becomes l.x0
	l0.y0 becomes y+2+strSize.cy
	lines.add(l0)
	Line l1 becomes new(Line)
	l1.x becomes x
	l1.y becomes y
	l1.x0 becomes x
	l1.y0 becomes l0.y0
	lines.add(l1)
	Line l2 becomes new(Line)
	l2.x becomes x
	l2.y becomes l0.y0
	l2.x0 becomes l.x0
	l2.y0 becomes l0.y0
	lines.add(l2)
	SimpleLabel lbl becomes new(SimpleLabel)
	lbl.text becomes text
	lbl.x becomes x+1
	lbl.y becomes y+1
	components.add(lbl)
	RECT hitbox becomes new(RECT)
	hitbox.left becomes x
	hitbox.top becomes y
	hitbox.right becomes x+strSize.cx+2
	hitbox.bottom becomes y+strSize.cy+2
	hitboxes.add(hitbox)
	retn(hitbox)
	
}

public func(int x1,int y1,int x2,int y2) reDraw {
	
	RECT rcb becomes new(RECT)
	rcb.left becomes x1
	rcb.right becomes  x2
	rcb.top becomes y1
	rcb.bottom becomes y2
	RedrawWindow(windowHandle,rcb,null,RDW_INVALIDATE)
	
}

constructor(str formTitle,int X,int Y,int width,int height) {
	
	wndClassA becomes new(WNDCLASSA)
	wndClassA.hInstance becomes GetModuleHandleA(null)
	wndClassA.lpfnWndProc becomes $wndProc
	wndClassA.lpszClassName becomes className
	RegisterClassA(wndClassA)
	x becomes X
	y becomes Y
	w becomes width
	h becomes height
	title becomes formTitle
	
}
