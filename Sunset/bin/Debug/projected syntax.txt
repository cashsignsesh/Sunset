If statements:

int myInt becomes 13
int myInt0 becomes 14
if(myInt,>=,myInt0) {
	
	
	
}
else {



}

If boolean operators:
 - >= Greater than or equal to
 - > Greater than
 - <= Less than or equal to
 - < Less than
 - = Equal to
 - =/= Not equal to

Boolean data notes:
Anything other than 1: true
0: false

Functions:

With return value and parameters:

                         v--- Will expect KeywordType.TYPE or block
func(byte b,shr s) myFunc byte {
	
	byte myLocalByte
	
	retn(myLocalByte)
	
}

With return value but no parameters:

func myFunc0 shr {
	
	shr myShort
	
	retn(myShort)
	
}

Without return value but with parameters:

    v----- notice how in Keyword#hasParameters (C#) the parameters are optional, and if no parameters are provided, then the Keyword itself is responsible to throw a ParsingError. Parameters are seperated by commas.
func(int param) myFunc1 {
	
	ret
	
}

Without return value or parameters:

func myFunc2 {
	
	retn
	
}

--------------------------------------
Timestamp: 5:00PM 6/15/2021
--------------------------------------

Changing Array Style:
SetArrStyle(HEAP)
Param List: HEAP, STATIC, STACK

Foreach loops:
byte# myArr becomes #16
myArr[0] becomes 3
...
foreach(var,myArr) {
	
	Byte "var" is now defined &
	stored as a local variable
	
}

--------------------------------------
Timestamp: 1:16AM 6/19/2021
--------------------------------------

Dll Referencing:
(DllRef Keyword, Params: DLL Name, Param Var Types of function...) (Function Name) (Return Value)

dllref(User32,int,str,str,int) MessageBoxA int

MessageBoxA(0,"","",0)


--------------------------------------
Timestamp: 11:14PM 7/10/2021
--------------------------------------

Classes/Structs:
(To define a class/struct, just create a file and write functions/variables etc. in sunset)

Importing a class:
import(MyClassName.sunset)
OR:
import(C:\Fakepath\MyClass.sunset)
OR:
import(MyClass) ; if file doesn't exist, .sunset appended to end in compiler, if file still doesn't exist throw ParsingError as normal

Defining a class:

MyClass myClass becomes new(MyClass) ; The new keyword is what causes the heap to get copied and called
; You can set it to a different instance of the same class
; I.e
; MyClass myClass0
; MyClass myClass becomes myClass0

Calling functions in a class:
myClass.myClassFunction
myClass.myClassFunctionWithParams(123,123)

Getting/setting variables in a class:
myClass.myClassVariable becomes 123
int myInteger becomes myClass.myClassVariable


--------------------------------------
Timestamp: 12:52AM 8/5/2021
--------------------------------------

Foreach loop:
int# arr becomes #3
foreach (i,arr) {
	
	; New local var 'i' in block
	; If it is set, the only thing that will change
	; is the local variable until the end of the block
	
}

--------------------------------------
Timestamp 5:48AM 8/6/2021
--------------------------------------

Switch block:
int i becomes 4
switch (i) {
	
	case(0):
		
		break ; On break, end of switch statement is reached
		      ; If no break and/or case is false, then go to
		      ; next case.
	
	case(1):
		break
	
	case(4):
		i becomes 6
	default:
		++i
	
	
}
retn(i)

--------------------------------------
Timestamp 5:10PM 8/8/2021
--------------------------------------

Constructor:

; No params:
constructor {
	
	
	
}
; With params:
constructor(int x,int y) {
	
	
	
}

--------------------------------------
Timestamp 5:28PM 8/8/2021
--------------------------------------

Gonna have to make a List<String,Tuple<String,VarType>>typeWords; // Type word (i.e "T1"), actual var type
and update all Check Var Type Here's
Might need to update KWImport#execute#childParser#keywordMgr#classWords to include the class for "T1" if it is of VarType.CLASS

Types (Only can set in import):
import(List<int>) ; <--- single type
import(List<str>) ; <--- single type
import(Tuple<int,str>) ; <--- many types

List<int> numList becomes new(List<int>)
List<str> wordList becomes new(List<str>)
Tuple<int,str> tpl becomes new(Tuple<int,str>)

---> In List.sunset:

; -- in header --
EXPECTED_TYPES(T1)
; --           --

;examples:
T1 varWithType becomes 123
T1# arrayOfType becomes #3
func(int index) get T1 {
	
	retn(arrayOfType[index])
	
}