EXPECTED_TYPES(T)
dllref(Kernel32,int,int,T#) HeapFree bool
dllref(Kernel32,int) SetLastError void

T# innerList becomes #0
pullable int length becomes 0

public func(T item) add {
	
	T# newArr becomes #length+1
	int i becomes 0
	while (i,=/=,length) { 
		newArr[i] becomes innerList[i] 
		++i 
	}
	newArr[length] becomes item
	; Note, GetProcessHeap stores the process heap after it is retrieved for the first time (so re calling it isn't detrimental)
	HeapFree(getProcessHeap,null,innerList)
	innerList becomes newArr
	
	++length
	
}

public func(int index) get T {	
	
	; ERROR_NO_MATCH
	if (index,>=,length) { SetLastError(1169) }
	retn(innerList[index]) 
	
}

; Note: this will be referenced to the List (any updates on the array will update the list)
public func toArray T# { retn(innerList) }

public func(int index) remove {
	
	T# newArr becomes #length-1
	int i becomes 0
	int i0 becomes 0
	while (i,=/=,length) { 
		if (i,=/=,index) {
			newArr[i0] becomes innerList[i] 
			++i0
		}
		++i 
	}
	HeapFree(getProcessHeap,null,innerList)
	innerList becomes newArr
	
	length becomes length-1
		
}

public func(T item) indexOf int {
	
	int index becomes 0
	foreach(item0,innerList) {
		if (item,=,item0) { retn(index) }
		++index
	}
	retn(-1)
	
}

; doesn't work for some reason?!
;public func(T item,int index) insert {
;	
;	++length
;	T# newArr becomes #length
;	int i becomes 0
;	int i0 becomes 0
;	while (i,=/=,length) { 
;		if (i,=,index) {
;			newArr[i] becomes item
;		}
;		else {
;			newArr[i] becomes innerList[i0] 
;			++i0
;		}
;		++i
;	}
;	HeapFree(getProcessHeap,null,innerList)
;	innerList becomes newArr
;	
;}

public func(T item,int index) set {
	
	T# newArr becomes #length
	int i becomes 0
	int i0 becomes 0
	while (i,=/=,length) { 
		if (i,=/=,index) {
			newArr[i] becomes innerList[i] 
		}
		else {
			newArr[i] becomes item
		}
		++i 
	}
	HeapFree(getProcessHeap,null,innerList)
	innerList becomes newArr
	
}

public func clear {

	HeapFree(getProcessHeap,null,innerList)
	innerList becomes #0
	length becomes 0
	
	;int i becomes 0
	;int len becomes length
	;while (i,=/=,len) {
	;	remove(0)
	;	++i
	;}
	
}

public func(T# range) addRange {
	
	foreach (item,range) {
		add(item)
	}
	
}

public func(T item) contains bool {
	foreach (item0,innerList) {
		if (item0,=,item) { retn(true) }
	}
	retn(false)
}